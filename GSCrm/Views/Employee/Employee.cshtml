@{
    Layout = "_Layout";
}
@using static GSCrm.CommonConsts
@using GSCrm.Data.ApplicationInfo
@using GSCrm.Helpers
@using GSCrm.Data
@using GSCrm.Models.Enums
@inject ApplicationDbContext context
@inject ResManager resManager
@model EmployeeViewModel
@inject IViewsInfo viewsInfo
@{
    string currentUserId = User.GetUserModel(context).Id;
    ViewInfo orgView = viewsInfo.Get(currentUserId, ORGANIZATIONS);
}

@* // Хлебные крошки *@
<nav aria-label="breadcrumb">
    <ol class="breadcrumb one-line-crumbs">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">@resManager.GetString("Home")</a></li>
        <li class="breadcrumb-item">
            <a asp-controller="@ORGANIZATION" asp-action="@ORGANIZATIONS" asp-route-pageNumber="@orgView.CurrentPageNumber">
                @resManager.GetString(ORGANIZATIONS)
            </a>
        </li>
        <li class="breadcrumb-item">
            <a asp-controller="@ORGANIZATION" asp-action="BackToOrganization" asp-route-orgId="@Model.OrganizationId">
                @resManager.GetString(ORGANIZATION): @Model.OrganizationName
            </a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">@resManager.GetString(EMPLOYEE): @Model.FullInitialName</li>
    </ol>
</nav>

@* // Карточка сотрудника *@
<div class="container mt-3">
    <div id="employeeForm">
        <div class="mt-2 text-center">
            <h3>@Model.FullInitialName</h3>
        </div>
        @switch (Model.EmployeeStatus)
        {
            case EmployeeStatus.Lock:
                <input id="employeeLockReason" hidden="hidden" value="@Model.EmployeeLockReason" />
                switch (Model.EmployeeLockReason)
                {
                    // Отсутствует основная должность
                    case EmployeeLockReason.DivisionAbsent:
                    case EmployeeLockReason.PrimaryPositionAbsent:
                        await Html.RenderPartialAsync($"{EMP_VIEWS_REL_PATH}Partial/EmployeeDivisionAbsent.cshtml");
                        break;

                    // Пользователь отказался от приглашения или вышел из организации
                    case EmployeeLockReason.RejectInvite:
                    case EmployeeLockReason.EmployeeLeftOrganization:
                        await Html.RenderPartialAsync($"{EMP_VIEWS_REL_PATH}Partial/EmployeeLeftOrg.cshtml");
                        break;

                    // Сотрудник, будучи заблокированным покинул организацию
                    case EmployeeLockReason.LockedEmployeeLeftOrg:
                        <p class="label-lg">Тест</p>
                        break;
                }
                break;

            case EmployeeStatus.Active:
                await Html.RenderPartialAsync($"{EMP_VIEWS_REL_PATH}Partial/EmployeeActive.cshtml");
                break;

            default:
            case EmployeeStatus.AwaitingInvitationAcceptance:
                <p class="label-lg text-center">@resManager.GetString("EmployeeIsNonActive")</p>
                break;
        }
    </div>
</div>